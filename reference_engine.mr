// Engine Sim V0.1.14A
// 1991 Mercedes-Benz M 120 6.0 408 HP @ 5200
// Created by oror 2023
// 1-12-5-8-3-10-6-7-2-11-4-9

/*
{
  "cam_cfg": {
    "es_version": "0.1.14a",
    "resolution": 64,
    "intake_volume": 0.4,
    "exhaust_volume": 0.25,
    "intake_at_lift": 0.508,
    "exhaust_at_lift": 0.508,
    "intake_trim": 1.0,
    "exhaust_trim": 1.0,
    "intake_sigma": 1.5,
    "exhaust_sigma": 1.5,
    "intake_base_mult": 1.833,
    "exhaust_base_mult": 1.833,
    "intake_cos": true,
    "exhaust_cos": true,
    "equal_base_radius": true,
    "ramp_steepness": 5.0,
    "ramp_position": 0.0,
    "lift_significant_fraction": 500.0,
    "roller_tappet_radius": 0.5
  },
  "flow_cfg": {
    "resolution": 32,
    "power_factor": 1.2,
    "max_power_rpm": 5200.0,
    "max_torque_rpm": 3500.0,
    "port_to_valve_area": 0.87,
    "valve_to_stem_dia": 5.5,
    "intake_runner_dia_mult": 1.04,
    "ir_to_er_ratio": 3.3,
    "exhaust_flange_dia": null,
    "primary_area_coeff": 1.05,
    "collector_area_coeff": 0.35,
    "smoothness": 3.0
  },
  "ign_cfg": {
    "resolution": 16,
    "start_rpm": 300,
    "end_rpm": 3000,
    "start_deg": 0,
    "end_deg": 32,
    "flywheel": 4,
    "exp_mode": 2
  }
}
*/

import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label bore(89.0)
label stroke(80.2)
label compression_ratio(10.0)
label con_rod(153.8)
label compression_height(33.0 * units.mm)
label intake_valve_diameter(35.0) // 129.067
label exhaust_valve_diameter(31.0) // M 120.983, M 120.981
label intake_valves(2.0)
label exhaust_valves(2.0)

label redline(6000.0) // RPM

label cyl(12.0)
label row(2.0)
label cycle(720.0 * units.deg)
label vee(60.0 * units.deg)
label rot(cycle / cyl)
label rot90(90.0 * units.deg)
label rot180(180.0 * units.deg)
label rot360(360.0 * units.deg)
label cyl_base(cyl / row)
label rot_base(cycle / cyl_base)

// CAT cams 241째/261째 - 200째/217째 - 9.20mm/9.35mm - 0.30mm/0.95mm
label IVL(9.20)
label EVL(9.35)
label IVO(10.5 * units.deg) //BTDC
label IVC(50.5 * units.deg) //ABDC
label EVO(60.5 * units.deg) //BBDC
label EVC(20.5 * units.deg) //ATDC

label intake_duration(IVO + IVC + rot180)
label exhaust_duration(EVO + EVC + rot180)

label ILC((rot180 - IVO + IVC) / 2.0 + rot360)
label ELC((rot180 - EVO + EVC) / 2.0 + rot180)

label con_rod_mass(650.0) // ? g
label piston_mass(500.0) // ?
label crank_mass(25.0) // ? kg
label flywheel_mass(7.0) // kg

label exhaust_delay_coeff(1.5)

public node variant_0 {
    output s1: 0;
    output s5: 1;
    output s3: 2;
    output s6: 3;
    output s2: 4;
    output s4: 5;
}

public node intake_lobe_profile {
    // lobes.py v0.9f
    alias output __out: _lobe_profile;
    function _lobe_profile(2.306 * units.deg)
        _lobe_profile
        .add_sample(-73.780 * units.deg, 0.000 * units.mm)
        .add_sample(-71.475 * units.deg, 0.023 * units.mm)
        .add_sample(-69.169 * units.deg, 0.113 * units.mm)
        .add_sample(-66.863 * units.deg, 0.224 * units.mm)
        .add_sample(-64.558 * units.deg, 0.349 * units.mm)
        .add_sample(-62.252 * units.deg, 0.494 * units.mm)
        .add_sample(-59.947 * units.deg, 0.657 * units.mm)
        .add_sample(-57.641 * units.deg, 0.844 * units.mm)
        .add_sample(-55.335 * units.deg, 1.055 * units.mm)
        .add_sample(-53.030 * units.deg, 1.312 * units.mm)
        .add_sample(-50.724 * units.deg, 1.599 * units.mm)
        .add_sample(-48.418 * units.deg, 1.915 * units.mm)
        .add_sample(-46.113 * units.deg, 2.260 * units.mm)
        .add_sample(-43.807 * units.deg, 2.633 * units.mm)
        .add_sample(-41.501 * units.deg, 3.033 * units.mm)
        .add_sample(-39.196 * units.deg, 3.457 * units.mm)
        .add_sample(-36.890 * units.deg, 3.903 * units.mm)
        .add_sample(-34.585 * units.deg, 4.366 * units.mm)
        .add_sample(-32.279 * units.deg, 4.839 * units.mm)
        .add_sample(-29.973 * units.deg, 5.317 * units.mm)
        .add_sample(-27.668 * units.deg, 5.790 * units.mm)
        .add_sample(-25.362 * units.deg, 6.251 * units.mm)
        .add_sample(-23.056 * units.deg, 6.690 * units.mm)
        .add_sample(-20.751 * units.deg, 7.096 * units.mm)
        .add_sample(-18.445 * units.deg, 7.502 * units.mm)
        .add_sample(-16.139 * units.deg, 7.878 * units.mm)
        .add_sample(-13.834 * units.deg, 8.201 * units.mm)
        .add_sample(-11.528 * units.deg, 8.463 * units.mm)
        .add_sample(-9.223 * units.deg, 8.719 * units.mm)
        .add_sample(-6.917 * units.deg, 8.918 * units.mm)
        .add_sample(-4.611 * units.deg, 9.048 * units.mm)
        .add_sample(-2.306 * units.deg, 9.135 * units.mm)
        .add_sample(0.000 * units.deg, 9.200 * units.mm)
        .add_sample(2.306 * units.deg, 9.135 * units.mm)
        .add_sample(4.611 * units.deg, 9.048 * units.mm)
        .add_sample(6.917 * units.deg, 8.918 * units.mm)
        .add_sample(9.223 * units.deg, 8.719 * units.mm)
        .add_sample(11.528 * units.deg, 8.463 * units.mm)
        .add_sample(13.834 * units.deg, 8.201 * units.mm)
        .add_sample(16.139 * units.deg, 7.878 * units.mm)
        .add_sample(18.445 * units.deg, 7.502 * units.mm)
        .add_sample(20.751 * units.deg, 7.096 * units.mm)
        .add_sample(23.056 * units.deg, 6.690 * units.mm)
        .add_sample(25.362 * units.deg, 6.251 * units.mm)
        .add_sample(27.668 * units.deg, 5.790 * units.mm)
        .add_sample(29.973 * units.deg, 5.317 * units.mm)
        .add_sample(32.279 * units.deg, 4.839 * units.mm)
        .add_sample(34.585 * units.deg, 4.366 * units.mm)
        .add_sample(36.890 * units.deg, 3.903 * units.mm)
        .add_sample(39.196 * units.deg, 3.457 * units.mm)
        .add_sample(41.501 * units.deg, 3.033 * units.mm)
        .add_sample(43.807 * units.deg, 2.633 * units.mm)
        .add_sample(46.113 * units.deg, 2.260 * units.mm)
        .add_sample(48.418 * units.deg, 1.915 * units.mm)
        .add_sample(50.724 * units.deg, 1.599 * units.mm)
        .add_sample(53.030 * units.deg, 1.312 * units.mm)
        .add_sample(55.335 * units.deg, 1.055 * units.mm)
        .add_sample(57.641 * units.deg, 0.844 * units.mm)
        .add_sample(59.947 * units.deg, 0.657 * units.mm)
        .add_sample(62.252 * units.deg, 0.494 * units.mm)
        .add_sample(64.558 * units.deg, 0.349 * units.mm)
        .add_sample(66.863 * units.deg, 0.224 * units.mm)
        .add_sample(69.169 * units.deg, 0.113 * units.mm)
        .add_sample(71.475 * units.deg, 0.023 * units.mm)
        .add_sample(73.780 * units.deg, 0.000 * units.mm)
}

public node exhaust_lobe_profile {
    // lobes.py v0.9f
    alias output __out: _lobe_profile;
    function _lobe_profile(2.717 * units.deg)
        _lobe_profile
        .add_sample(-84.241 * units.deg, 0.000 * units.mm)
        .add_sample(-81.523 * units.deg, 0.019 * units.mm)
        .add_sample(-78.806 * units.deg, 0.056 * units.mm)
        .add_sample(-76.088 * units.deg, 0.136 * units.mm)
        .add_sample(-73.371 * units.deg, 0.228 * units.mm)
        .add_sample(-70.654 * units.deg, 0.330 * units.mm)
        .add_sample(-67.936 * units.deg, 0.446 * units.mm)
        .add_sample(-65.219 * units.deg, 0.578 * units.mm)
        .add_sample(-62.501 * units.deg, 0.728 * units.mm)
        .add_sample(-59.784 * units.deg, 0.915 * units.mm)
        .add_sample(-57.066 * units.deg, 1.147 * units.mm)
        .add_sample(-54.349 * units.deg, 1.413 * units.mm)
        .add_sample(-51.631 * units.deg, 1.715 * units.mm)
        .add_sample(-48.914 * units.deg, 2.060 * units.mm)
        .add_sample(-46.197 * units.deg, 2.467 * units.mm)
        .add_sample(-43.479 * units.deg, 2.911 * units.mm)
        .add_sample(-40.762 * units.deg, 3.389 * units.mm)
        .add_sample(-38.044 * units.deg, 3.896 * units.mm)
        .add_sample(-35.327 * units.deg, 4.424 * units.mm)
        .add_sample(-32.609 * units.deg, 4.965 * units.mm)
        .add_sample(-29.892 * units.deg, 5.507 * units.mm)
        .add_sample(-27.174 * units.deg, 6.035 * units.mm)
        .add_sample(-24.457 * units.deg, 6.571 * units.mm)
        .add_sample(-21.740 * units.deg, 7.095 * units.mm)
        .add_sample(-19.022 * units.deg, 7.575 * units.mm)
        .add_sample(-16.305 * units.deg, 7.994 * units.mm)
        .add_sample(-13.587 * units.deg, 8.343 * units.mm)
        .add_sample(-10.870 * units.deg, 8.697 * units.mm)
        .add_sample(-8.152 * units.deg, 8.964 * units.mm)
        .add_sample(-5.435 * units.deg, 9.140 * units.mm)
        .add_sample(-2.717 * units.deg, 9.261 * units.mm)
        .add_sample(0.000 * units.deg, 9.350 * units.mm)
        .add_sample(2.717 * units.deg, 9.261 * units.mm)
        .add_sample(5.435 * units.deg, 9.140 * units.mm)
        .add_sample(8.152 * units.deg, 8.964 * units.mm)
        .add_sample(10.870 * units.deg, 8.697 * units.mm)
        .add_sample(13.587 * units.deg, 8.343 * units.mm)
        .add_sample(16.305 * units.deg, 7.994 * units.mm)
        .add_sample(19.022 * units.deg, 7.575 * units.mm)
        .add_sample(21.740 * units.deg, 7.095 * units.mm)
        .add_sample(24.457 * units.deg, 6.571 * units.mm)
        .add_sample(27.174 * units.deg, 6.035 * units.mm)
        .add_sample(29.892 * units.deg, 5.507 * units.mm)
        .add_sample(32.609 * units.deg, 4.965 * units.mm)
        .add_sample(35.327 * units.deg, 4.424 * units.mm)
        .add_sample(38.044 * units.deg, 3.896 * units.mm)
        .add_sample(40.762 * units.deg, 3.389 * units.mm)
        .add_sample(43.479 * units.deg, 2.911 * units.mm)
        .add_sample(46.197 * units.deg, 2.467 * units.mm)
        .add_sample(48.914 * units.deg, 2.060 * units.mm)
        .add_sample(51.631 * units.deg, 1.715 * units.mm)
        .add_sample(54.349 * units.deg, 1.413 * units.mm)
        .add_sample(57.066 * units.deg, 1.147 * units.mm)
        .add_sample(59.784 * units.deg, 0.915 * units.mm)
        .add_sample(62.501 * units.deg, 0.728 * units.mm)
        .add_sample(65.219 * units.deg, 0.578 * units.mm)
        .add_sample(67.936 * units.deg, 0.446 * units.mm)
        .add_sample(70.654 * units.deg, 0.330 * units.mm)
        .add_sample(73.371 * units.deg, 0.228 * units.mm)
        .add_sample(76.088 * units.deg, 0.136 * units.mm)
        .add_sample(78.806 * units.deg, 0.056 * units.mm)
        .add_sample(81.523 * units.deg, 0.019 * units.mm)
        .add_sample(84.241 * units.deg, 0.000 * units.mm)
}

public node intake_flow {
    alias output __out: _intake_flow;
    function _intake_flow(0.297 * units.mm)
    _intake_flow
        .add_flow_sample(0.000, 0.0)
        .add_flow_sample(0.297, 13.9)
        .add_flow_sample(0.594, 27.5)
        .add_flow_sample(0.890, 40.5)
        .add_flow_sample(1.187, 52.9)
        .add_flow_sample(1.484, 64.5)
        .add_flow_sample(1.781, 75.4)
        .add_flow_sample(2.077, 85.7)
        .add_flow_sample(2.374, 95.5)
        .add_flow_sample(2.671, 104.8)
        .add_flow_sample(2.968, 113.8)
        .add_flow_sample(3.265, 122.4)
        .add_flow_sample(3.561, 130.7)
        .add_flow_sample(3.858, 138.8)
        .add_flow_sample(4.155, 146.6)
        .add_flow_sample(4.452, 154.2)
        .add_flow_sample(4.748, 161.6)
        .add_flow_sample(5.045, 168.8)
        .add_flow_sample(5.342, 175.9)
        .add_flow_sample(5.639, 182.7)
        .add_flow_sample(5.935, 189.4)
        .add_flow_sample(6.232, 195.9)
        .add_flow_sample(6.529, 202.1)
        .add_flow_sample(6.826, 208.0)
        .add_flow_sample(7.123, 213.5)
        .add_flow_sample(7.419, 218.4)
        .add_flow_sample(7.716, 222.6)
        .add_flow_sample(8.013, 226.1)
        .add_flow_sample(8.310, 228.8)
        .add_flow_sample(8.606, 230.8)
        .add_flow_sample(8.903, 232.3)
        .add_flow_sample(9.200, 233.3)
}

public node exhaust_flow {
    alias output __out: _exhaust_flow;
    function _exhaust_flow(0.302 * units.mm)
    _exhaust_flow
        .add_flow_sample(0.000, 0.0)
        .add_flow_sample(0.302, 14.2)
        .add_flow_sample(0.603, 28.0)
        .add_flow_sample(0.905, 41.3)
        .add_flow_sample(1.206, 53.9)
        .add_flow_sample(1.508, 65.6)
        .add_flow_sample(1.810, 76.7)
        .add_flow_sample(2.111, 87.1)
        .add_flow_sample(2.413, 96.9)
        .add_flow_sample(2.715, 106.3)
        .add_flow_sample(3.016, 115.3)
        .add_flow_sample(3.318, 123.9)
        .add_flow_sample(3.619, 132.3)
        .add_flow_sample(3.921, 140.3)
        .add_flow_sample(4.223, 148.1)
        .add_flow_sample(4.524, 155.7)
        .add_flow_sample(4.826, 163.0)
        .add_flow_sample(5.127, 170.1)
        .add_flow_sample(5.429, 177.0)
        .add_flow_sample(5.731, 183.5)
        .add_flow_sample(6.032, 189.6)
        .add_flow_sample(6.334, 195.2)
        .add_flow_sample(6.635, 200.2)
        .add_flow_sample(6.937, 204.3)
        .add_flow_sample(7.239, 207.6)
        .add_flow_sample(7.540, 210.1)
        .add_flow_sample(7.842, 211.9)
        .add_flow_sample(8.144, 213.1)
        .add_flow_sample(8.445, 213.8)
        .add_flow_sample(8.747, 214.3)
        .add_flow_sample(9.048, 214.6)
        .add_flow_sample(9.350, 214.8)
}

intake_lobe_profile intake_lobe_profile()
exhaust_lobe_profile exhaust_lobe_profile()

intake_flow intake_flow()
exhaust_flow exhaust_flow()

private node add_lobes {
    input base;
    input shift: 0.0;
    input var;
    input this;
    alias output __out: this;

    this.add_lobe(base + var.s1 * rot_base + shift)
    this.add_lobe(base + var.s2 * rot_base + shift)
    this.add_lobe(base + var.s3 * rot_base + shift)
    this.add_lobe(base + var.s4 * rot_base + shift)
    this.add_lobe(base + var.s5 * rot_base + shift)
    this.add_lobe(base + var.s6 * rot_base + shift)
}

public node bank_builder {
    input var;
    input crankshaft;
    input angle;
    input phasing;
    input ignition;
    input intake;
    input exhaust;
    input pls;

    input flip: false;

    output bank: _b0;

    ignition_wire _wire1()
    ignition_wire _wire2()
    ignition_wire _wire3()
    ignition_wire _wire4()
    ignition_wire _wire5()
    ignition_wire _wire6()

    piston p(
        piston_parameters(
            mass: piston_mass * units.g,
            blowby: k_28inH2O(0.028),
            compression_height: compression_height,
            wrist_pin_position: 0.0,
            displacement: 0.0
        )
    )

    connecting_rod cr(
        connecting_rod_parameters(
            mass: con_rod_mass * units.g,
            moment_of_inertia: rod_moment_of_inertia(
                mass: con_rod_mass * units.g,
                length: con_rod * units.mm
            ),
            center_of_mass: 0.0,
            length: con_rod * units.mm
        )
    )

    cylinder_bank_parameters bank_params(
        bore: bore * units.mm,
        deck_height: (con_rod + stroke / 2.0) * units.mm + compression_height
    )

    camshaft _intake_cam_0(base_radius: 17.0 * units.mm, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(base_radius: 17.0 * units.mm, lobe_profile: exhaust_lobe_profile)

    _intake_cam_0.add_lobes(ILC, phasing, var)
    _exhaust_cam_0.add_lobes(ELC, phasing, var)

    ignition.connect_wire(_wire1, rot_base * var.s1 + phasing)
    ignition.connect_wire(_wire2, rot_base * var.s2 + phasing)
    ignition.connect_wire(_wire3, rot_base * var.s3 + phasing)
    ignition.connect_wire(_wire4, rot_base * var.s4 + phasing)
    ignition.connect_wire(_wire5, rot_base * var.s5 + phasing)
    ignition.connect_wire(_wire6, rot_base * var.s6 + phasing)

    cylinder_bank _b0(bank_params, angle: angle)

    _b0
    .add_cylinder(
            piston: p,
            connecting_rod: cr,
            rod_journal: crankshaft.rj0,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pls.pl0,
            ignition_wire: _wire1
        )
    .add_cylinder(
            piston: p,
            connecting_rod: cr,
            rod_journal: crankshaft.rj1,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pls.pl1,
            ignition_wire: _wire2
        )
    .add_cylinder(
            piston: p,
            connecting_rod: cr,
            rod_journal: crankshaft.rj2,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pls.pl2,
            ignition_wire: _wire3
        )
    .add_cylinder(
            piston: p,
            connecting_rod: cr,
            rod_journal: crankshaft.rj3,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pls.pl3,
            ignition_wire: _wire4
        )
    .add_cylinder(
            piston: p,
            connecting_rod: cr,
            rod_journal: crankshaft.rj4,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pls.pl4,
            ignition_wire: _wire5
        )
    .add_cylinder(
            piston: p,
            connecting_rod: cr,
            rod_journal: crankshaft.rj5,
            intake: intake,
            exhaust_system: exhaust,
            primary_length: pls.pl5,
            ignition_wire: _wire6
        )
    .set_cylinder_head(
        head(
            intake_camshaft: _intake_cam_0,
            exhaust_camshaft: _exhaust_cam_0,
            flip_display: flip
        )
    )
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node head {
    // port_flow.py v1.3
    // intake port area: 16.1 cm짼; saturated lift: 7.85 mm
    // exhaust port area: 12.6 cm짼; saturated lift: 6.95 mm
    // cylinder volume: 498.9 cm쨀 (30.4 CI); engine volume: 5.987 L (365.4 CI)
    // 16 harmonic intake runner length: 17.3 cm; diameter: 4.0 cm
    // primary length: 29.2 cm, area: 13.3 cm짼, diameter: 4.1 cm
    // collector diameter: 8.4 cm, area: 55.7 cm짼
    // target power: 5200 RPM, power factor 1.20

    input intake_camshaft;
    input exhaust_camshaft;
    input flip_display: false;
    
    alias output __out: head;
    generic_cylinder_head head(
        chamber_volume: 49.894 * units.cc,
        intake_runner_volume: 217.3 * units.cc,
        intake_runner_cross_section_area: 12.5 * units.cm2,
        exhaust_runner_volume: 65.8 * units.cc,
        exhaust_runner_cross_section_area: 13.3 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

public node crank {
    input phasing;
    input var;

    output c: _c;
    output rj0: _rj0;
    output rj1: _rj1;
    output rj2: _rj2;
    output rj3: _rj3;
    output rj4: _rj4;
    output rj5: _rj5;

    label crank_moment(disk_moment_of_inertia(mass: crank_mass * units.kg, radius: (stroke / 2.0) * units.mm))
    label flywheel_moment(disk_moment_of_inertia(mass: flywheel_mass * units.kg, radius: (stroke * 3.5) * units.mm))
    label other_moment(disk_moment_of_inertia(mass: 1 * units.kg, radius: 1.0 * units.cm))

    crankshaft _c(
        throw: (stroke / 2.0) * units.mm,
        flywheel_mass: flywheel_mass * units.kg,
        mass: crank_mass * units.kg,
        friction_torque: 9.0 * units.Nm,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        tdc: 0.0
    )

    rod_journal _rj0(angle: rot_base * var.s1 + rot90 + vee / 2)
    rod_journal _rj1(angle: rot_base * var.s2 + rot90 + vee / 2)
    rod_journal _rj2(angle: rot_base * var.s3 + rot90 + vee / 2)
    rod_journal _rj3(angle: rot_base * var.s4 + rot90 + vee / 2)
    rod_journal _rj4(angle: rot_base * var.s5 + rot90 + vee / 2)
    rod_journal _rj5(angle: rot_base * var.s6 + rot90 + vee / 2)

    _c
        .add_rod_journal(_rj0)
        .add_rod_journal(_rj1)
        .add_rod_journal(_rj2)
        .add_rod_journal(_rj3)
        .add_rod_journal(_rj4)
        .add_rod_journal(_rj5)
}

public node eng {
    alias output __out: engine;

    engine engine(
        name: "Mercedes-Benz M 120",
        starter_torque: 100 * units.Nm,
        starter_speed: 300 * units.rpm,
        redline: redline * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 8.5,
            burning_efficiency_randomness: 0.05,
            max_burning_efficiency: 0.80,
            molecular_mass: 115.0 * units.g,
            energy_density: 48.2 * units.MJ / units.kg,
            density: 0.755 * units.kg / units.L,
            molecular_afr: 14.7,
            low_efficiency_attenuation: 0.6,
            max_dilution_effect: 7.3,
            turbulence_to_flame_speed_ratio:
                function(2.5)
                    .add_sample(0.0, 2.0)
                    .add_sample(2.5, 6.8)
                    .add_sample(5.0, 11.0)
                    .add_sample(7.5, 15.0)
                    .add_sample(10.0, 18.8)
                    .add_sample(12.5, 22.5)
                    .add_sample(15.0, 26.2)
                    .add_sample(17.5, 29.8)
                    .add_sample(20.0, 33.3)
                    .add_sample(22.5, 36.8)
                    .add_sample(25.0, 40.3)
                    .add_sample(27.5, 43.7)
                    .add_sample(30.0, 47.1)
                    .add_sample(32.5, 50.5)
                    .add_sample(35.0, 53.8)
                    .add_sample(37.5, 57.2)
                    .add_sample(40.0, 60.5)
                    .add_sample(42.5, 63.7)
                    .add_sample(45.0, 67.0)
                    .add_sample(47.5, 70.2)
                    .add_sample(50.0, 73.5)
                    .add_sample(52.5, 76.7)
                    .add_sample(55.0, 79.9)
                    .add_sample(57.5, 83.0)
                    .add_sample(60.0, 86.2)
                    .add_sample(62.5, 89.3)
                    .add_sample(65.0, 92.5)
                    .add_sample(67.5, 95.6)
                    .add_sample(70.0, 98.7)
                    .add_sample(72.5, 101.8)
                    .add_sample(75.0, 104.9)
                    .add_sample(77.5, 108.0)
        ),
        throttle_gamma: 1.5,
        jitter: 0.6,
        noise: 0.1,
        hf_gain: 0.05,
        simulation_frequency: 8000
    )
    
    variant_0 variant()
    crank c0(vee / 2 + rot90, variant)

    ignition_module ignition(timing_curve: timing_curve, rev_limit: redline * 1.05 * units.rpm, limiter_duration: 0.08)

    exh_setup_1 exh()

    bank_builder bank0(
        var: variant,
        crankshaft: c0,
        angle: vee / 2.0,
        phasing: 0,
        ignition: ignition,
        intake: intake,
        exhaust: exh.ex0,
        pls: exh,
        flip: true
    )

    bank_builder bank1(
        var: variant,
        crankshaft: c0,
        angle: -vee / 2.0,
        phasing: vee + rot360,
        ignition: ignition,
        intake: intake,
        exhaust: exh.ex1,
        pls: exh
    )

    intake intake(
        plenum_volume: 5.1 * units.L,
        plenum_cross_section_area: 75.2 * units.cm2,
        runner_length: 17.3 * units.cm,
        intake_flow_rate: k_carb(658.6),
        idle_flow_rate: k_carb(0.05),
        idle_throttle_plate_position: 0.997,
        runner_flow_rate: k_carb(120.7),
        velocity_decay: 0.05
    )
 
    engine
        .add_crankshaft(c0.c)
        .add_cylinder_bank(bank0.bank)
        .add_cylinder_bank(bank1.bank)
        .add_ignition_module(ignition)

    function timing_curve(400.0 * units.rpm)
    timing_curve
        .add_sample(0.0 * units.rpm, 4.0 * units.deg)
        .add_sample(400.0 * units.rpm, 6.8 * units.deg)
        .add_sample(800.0 * units.rpm, 16.0 * units.deg)
        .add_sample(1200.0 * units.rpm, 22.7 * units.deg)
        .add_sample(1600.0 * units.rpm, 27.5 * units.deg)
        .add_sample(2000.0 * units.rpm, 31.0 * units.deg)
        .add_sample(2400.0 * units.rpm, 33.5 * units.deg)
        .add_sample(2800.0 * units.rpm, 35.3 * units.deg)
        .add_sample(3200.0 * units.rpm, 36.0 * units.deg)
        .add_sample(3600.0 * units.rpm, 36.0 * units.deg)
        .add_sample(4000.0 * units.rpm, 36.0 * units.deg)
        .add_sample(4400.0 * units.rpm, 36.0 * units.deg)
        .add_sample(4800.0 * units.rpm, 36.0 * units.deg)
        .add_sample(5200.0 * units.rpm, 36.0 * units.deg)
        .add_sample(5600.0 * units.rpm, 36.0 * units.deg)
        .add_sample(6000.0 * units.rpm, 36.0 * units.deg)
        .add_sample(6400.0 * units.rpm, -15.0 * units.deg)
        .add_sample(6800.0 * units.rpm, -60.0 * units.deg)
}

private node exh_setup_0 {
    output ex0: _ex0;
    output ex1: _ex1;

    output pl0: _pl0;
    output pl1: _pl1;
    output pl2: _pl2;
    output pl3: _pl3;
    output pl4: _pl4;
    output pl5: _pl5;

    label spacing_factor(1.1)
    label flange_density(1.0 * exhaust_delay_coeff)
    label collector_cross_section_area(27.9)

    label exhaust_pipe_length_0(305.0) // cm
    label exhaust_volume_0(collector_cross_section_area * exhaust_pipe_length_0 / 100.0) // Litres

    label exhaust_pipe_length_1(300.0) // cm
    label exhaust_volume_1(collector_cross_section_area * exhaust_pipe_length_0 / 100.0) // Litres

    float _pl0 ((5.2 * bore * spacing_factor / flange_density) * units.mm)
    float _pl1 ((4.5 * bore * spacing_factor / flange_density) * units.mm)
    float _pl2 ((3.5 * bore * spacing_factor / flange_density) * units.mm)
    float _pl3 ((2.8 * bore * spacing_factor / flange_density) * units.mm)
    float _pl4 ((2.0 * bore * spacing_factor / flange_density) * units.mm)
    float _pl5 ((1.0 * bore * spacing_factor / flange_density) * units.mm)

    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(576.3),
        collector_cross_section_area: 27.9 * units.cm2,
        length: exhaust_pipe_length_0 * units.cm,
        primary_tube_length: 29.2 * units.cm,
        primary_flow_rate: k_carb(201.7),
        velocity_decay: 1.0,
        volume: (exhaust_volume_0 + 10.0) * units.L
    )

    exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(576.3),
        collector_cross_section_area: 27.9 * units.cm2,
        length: exhaust_pipe_length_1 * units.cm,
        primary_tube_length: 29.2 * units.cm,
        primary_flow_rate: k_carb(201.7),
        velocity_decay: 1.0,
        volume: (exhaust_volume_1 + 10.0) * units.L
    )

    exhaust_system _ex0(es_params0, impulse_response: ir_lib.default_0)
    exhaust_system _ex1(es_params1, impulse_response: ir_lib.default_0)
}

private node exh_setup_1 {
    output ex0: _ex0;
    output ex1: _ex0;

    output pl0: _pl0;
    output pl1: _pl1;
    output pl2: _pl2;
    output pl3: _pl3;
    output pl4: _pl4;
    output pl5: _pl5;

    label spacing_factor(1.1)
    label flange_density(3.0 * exhaust_delay_coeff)
    label collector_cross_section_area(55.7)

    label exhaust_pipe_length_0(150.0) // cm
    label exhaust_volume_0(collector_cross_section_area * exhaust_pipe_length_0 / 100.0) // Litres

    float _pl0 ((5.0 * bore * spacing_factor / flange_density) * units.mm)
    float _pl1 ((4.2 * bore * spacing_factor / flange_density) * units.mm)
    float _pl2 ((3.0 * bore * spacing_factor / flange_density) * units.mm)
    float _pl3 ((3.0 * bore * spacing_factor / flange_density) * units.mm)
    float _pl4 ((2.2 * bore * spacing_factor / flange_density) * units.mm)
    float _pl5 ((1.0 * bore * spacing_factor / flange_density) * units.mm)

    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(1152.5),
        collector_cross_section_area: 55.7 * units.cm2,
        length: exhaust_pipe_length_0 * units.cm,
        primary_tube_length: 29.2 * units.cm,
        primary_flow_rate: k_carb(201.7),
        velocity_decay: 0.8,
        volume: (exhaust_volume_0 + 15.0) * units.L
    )
    exhaust_system _ex0(es_params0, impulse_response: ir_lib.default_0)
}

// 2000 CL600
public node veh {
    alias output __out: vehicle;

    label car_mass(2100) // 1955

    vehicle vehicle(
        mass: car_mass * units.kg,
        drag_coefficient: 0.28,
        cross_sectional_area: (1857 * units.mm) * (1398 * units.mm),
        diff_ratio: 2.82,
        tire_radius: (679.0 / 2) * units.mm, // 225/55 R 17 W
        rolling_resistance: 0.012 * car_mass * 9.81
        )
}

// 2000 CL600
private node trn {
    alias output __out:
        transmission(
            max_clutch_torque: 750 * units.Nm,
            max_clutch_flex: 15 * units.deg,
            limit_clutch_flex: true,
            clutch_stiffness: 20 * units.Nm / units.deg,
            clutch_damping: 1.0,
            simulate_flex: true
        )
        .add_gear(3.590)
        .add_gear(2.186)
        .add_gear(1.405)
        .add_gear(1.000)
        .add_gear(0.831);
}

run(
    engine: eng(),
    transmission: trn(),
    vehicle: veh()
)
